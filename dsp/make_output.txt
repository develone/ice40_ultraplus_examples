yosys -p "synth_ice40 -top top  -json top.json" top.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+79 (git sha1 b52f6cb19, gcc 12.2.0-14 -fPIC -Os)


-- Parsing `top.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Storing AST representation for module `$abstract\calc'.
Storing AST representation for module `$abstract\calc_dsp'.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top  -json top.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

2.3.1. Analyzing design hierarchy..
Top module:  \top

2.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\calc_dsp'.
Generating RTLIL representation for module `\calc_dsp'.

2.3.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \calc_dsp

2.3.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \calc_dsp
Removing unused module `$abstract\top'.
Removing unused module `$abstract\calc_dsp'.
Removing unused module `$abstract\calc'.
Removed 3 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$top.v:0$385'.
Removing empty process `top.$proc$top.v:26$384'.
Cleaned up 0 empty switches.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Removed a total of 0 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 41 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\calc_dsp.$proc$calc_dsp.v:0$390'.
  Set init value: \state = 4'0000
  Set init value: \out_val = 1'0
  Set init value: \dsp_ce = 1'1

2.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$176'.

2.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~21 debug messages>

2.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\calc_dsp.$proc$calc_dsp.v:0$390'.
Creating decoders for process `\calc_dsp.$proc$calc_dsp.v:49$386'.
     1/6: $0\dsp_oloadbot[0:0]
     2/6: $0\dsp_d[15:0]
     3/6: $0\dsp_b[15:0]
     4/6: $0\dsp_a[15:0]
     5/6: $0\out_val[0:0]
     6/6: $0\state[3:0]

2.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$459' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$460' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$461' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$462' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$463' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$464' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$465' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$466' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$467' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$468' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$469' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$470' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$471' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$472' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$473' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$474' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$475' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$476' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$477' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$478' with positive edge clock.
Creating register for signal `\calc_dsp.\state' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$479' with positive edge clock.
Creating register for signal `\calc_dsp.\out_val' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$480' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_ce' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$481' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_c' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$482' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_a' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$483' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_b' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$484' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_d' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$485' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_irsttop' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$486' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_irstbot' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$487' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_orsttop' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$488' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_orstbot' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$489' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_ahold' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$490' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_bhold' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$491' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_chold' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$492' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_dhold' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$493' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_oholdtop' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$494' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_oholdbot' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$495' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_addsubtop' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$496' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_addsubbot' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$497' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_oloadtop' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$498' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_oloadbot' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$499' with positive edge clock.
Creating register for signal `\calc_dsp.\dsp_ci' using process `\calc_dsp.$proc$calc_dsp.v:49$386'.
  created $dff cell `$procdff$500' with positive edge clock.

2.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Removing empty process `calc_dsp.$proc$calc_dsp.v:0$390'.
Found and cleaned up 3 empty switches in `\calc_dsp.$proc$calc_dsp.v:49$386'.
Removing empty process `calc_dsp.$proc$calc_dsp.v:49$386'.
Cleaned up 21 empty switches.

2.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module calc_dsp.
<suppressed ~2 debug messages>
Optimizing module top.

2.5. Executing FLATTEN pass (flatten design).
Deleting now unused module calc_dsp.
<suppressed ~1 debug messages>

2.6. Executing TRIBUF pass.

2.7. Executing DEMINOUT pass (demote inout ports to input or output).

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

2.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\calc_dsp_inst.$procmux$450: $auto$opt_reduce.cc:134:opt_pmux$502
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $flatten\calc_dsp_inst.$procdff$486 ($dff) from module top.
Setting constant 1-bit at position 0 on $flatten\calc_dsp_inst.$procdff$481 ($dff) from module top.
Setting constant 0-bit at position 0 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 1 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 2 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 3 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 4 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 5 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 6 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 7 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 8 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 9 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 10 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 11 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 12 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 13 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 14 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.
Setting constant 0-bit at position 15 on $flatten\calc_dsp_inst.$procdff$482 ($dff) from module top.

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.9. Rerunning OPT passes. (Maybe there is more to do..)

2.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

2.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.13. Executing OPT_DFF pass (perform DFF optimizations).

2.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.16. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.calc_dsp_inst.dsp_d as FSM state register:
    Users of register don't seem to benefit from recoding.

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\calc_dsp_inst.$procdff$483 ($dff) from module top (D = \calc_dsp_inst.dsp_o [15:0], Q = \calc_dsp_inst.dsp_a, rval = 16'0000000000000000).
Adding EN signal on $flatten\calc_dsp_inst.$procdff$480 ($dff) from module top (D = 1'1, Q = \calc_dsp_inst.out_val).
Adding EN signal on $flatten\calc_dsp_inst.$procdff$479 ($dff) from module top (D = $flatten\calc_dsp_inst.$add$calc_dsp.v:75$388_Y [3:0], Q = \calc_dsp_inst.state).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_DFF pass (perform DFF optimizations).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 4) from port B of cell top.$flatten\calc_dsp_inst.$procmux$456_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$flatten\calc_dsp_inst.$procmux$448_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$flatten\calc_dsp_inst.$procmux$447_CMP0 ($eq).
Removed top 9 bits (of 16) from mux cell top.$flatten\calc_dsp_inst.$procmux$443 ($mux).
Removed top 12 bits (of 32) from port B of cell top.$flatten\calc_dsp_inst.$eq$calc_dsp.v:92$389 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\calc_dsp_inst.$add$calc_dsp.v:75$388 ($add).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\calc_dsp_inst.$add$calc_dsp.v:75$388 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\calc_dsp_inst.$lt$calc_dsp.v:73$387 ($lt).
Removed top 9 bits (of 16) from wire top.$flatten\calc_dsp_inst.$0\dsp_d[15:0].
Removed top 28 bits (of 32) from wire top.$flatten\calc_dsp_inst.$add$calc_dsp.v:75$388_Y.

2.15. Executing PEEPOPT pass (run peephole optimizers).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.17. Executing SHARE pass (SAT-based resource sharing).

2.18. Executing TECHMAP pass (map to technology primitives).

2.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.18.2. Continuing TECHMAP pass.
Using template $paramod$44cd31b6e5d6416c716f7b6e38ff4c76a0f98877\_90_lut_cmp_ for cells of type $lt.
No more expansions possible.
<suppressed ~36 debug messages>

2.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\calc_dsp_inst.$add$calc_dsp.v:75$388 ($add).
  creating $alu model for $macc $flatten\calc_dsp_inst.$add$calc_dsp.v:75$388.
  creating $alu cell for $flatten\calc_dsp_inst.$add$calc_dsp.v:75$388: $auto$alumacc.cc:485:replace_alu$513
  created 1 $alu and 0 $macc cells.

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 7 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 8 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 9 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 10 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 11 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 12 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 13 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 14 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.
Setting constant 0-bit at position 15 on $flatten\calc_dsp_inst.$procdff$485 ($dff) from module top.

2.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.9. Rerunning OPT passes. (Maybe there is more to do..)

2.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.13. Executing OPT_DFF pass (perform DFF optimizations).

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.16. Finished OPT passes. (There is nothing left to do.)

2.23. Executing MEMORY pass.

2.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

2.26. Executing TECHMAP pass (map to technology primitives).

2.26.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

2.26.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

2.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.27. Executing ICE40_BRAMINIT pass.

2.28. Executing OPT pass (performing simple optimizations).

2.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.28.3. Executing OPT_DFF pass (perform DFF optimizations).

2.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.28.5. Finished fast OPT passes.

2.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\calc_dsp_inst.$procmux$443:
      Old ports: A=7'0000000, B=7'1111111, Y=$auto$wreduce.cc:461:run$508 [6:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:461:run$508 [0]
      New connections: $auto$wreduce.cc:461:run$508 [6:1] = { $auto$wreduce.cc:461:run$508 [0] $auto$wreduce.cc:461:run$508 [0] $auto$wreduce.cc:461:run$508 [0] $auto$wreduce.cc:461:run$508 [0] $auto$wreduce.cc:461:run$508 [0] $auto$wreduce.cc:461:run$508 [0] }
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.6. Executing OPT_DFF pass (perform DFF optimizations).

2.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.9. Rerunning OPT passes. (Maybe there is more to do..)

2.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.13. Executing OPT_DFF pass (perform DFF optimizations).

2.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.16. Finished OPT passes. (There is nothing left to do.)

2.31. Executing ICE40_WRAPCARRY pass (wrap carries).

2.32. Executing TECHMAP pass (map to technology primitives).

2.32.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.32.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$0d149ffe75563ef6fcc1a3dddc59d00af28651a7\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~148 debug messages>

2.33. Executing OPT pass (performing simple optimizations).

2.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~94 debug messages>

2.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

2.33.3. Executing OPT_DFF pass (perform DFF optimizations).

2.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 90 unused wires.
<suppressed ~3 debug messages>

2.33.5. Finished fast OPT passes.

2.34. Executing ICE40_OPT pass (performing simple optimizations).

2.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$513.slice[0].carry: CO=\calc_dsp_inst.state [0]

2.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.34.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$673 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [15], Q = \calc_dsp_inst.dsp_b [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$672 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [14], Q = \calc_dsp_inst.dsp_b [14], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$671 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [13], Q = \calc_dsp_inst.dsp_b [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$670 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [12], Q = \calc_dsp_inst.dsp_b [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$669 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [11], Q = \calc_dsp_inst.dsp_b [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$668 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [10], Q = \calc_dsp_inst.dsp_b [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$667 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [9], Q = \calc_dsp_inst.dsp_b [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$666 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [8], Q = \calc_dsp_inst.dsp_b [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$665 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [7], Q = \calc_dsp_inst.dsp_b [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$664 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [6], Q = \calc_dsp_inst.dsp_b [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$663 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [5], Q = \calc_dsp_inst.dsp_b [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$662 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [4], Q = \calc_dsp_inst.dsp_b [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$661 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [3], Q = \calc_dsp_inst.dsp_b [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$660 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.Y_B [2], Q = \calc_dsp_inst.dsp_b [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$659 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.B_AND_S [1], Q = \calc_dsp_inst.dsp_b [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$658 ($_DFF_P_) from module top (D = $flatten\calc_dsp_inst.$procmux$446.Y_B [0], Q = \calc_dsp_inst.dsp_b [0], rval = 1'0).

2.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 16 unused cells and 1 unused wires.
<suppressed ~17 debug messages>

2.34.6. Rerunning OPT passes. (Removed registers in this run.)

2.34.7. Running ICE40 specific optimizations.

2.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.34.10. Executing OPT_DFF pass (perform DFF optimizations).

2.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.34.12. Finished OPT passes. (There is nothing left to do.)

2.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.36. Executing TECHMAP pass (map to technology primitives).

2.36.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.36.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~60 debug messages>

2.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$513.slice[0].carry ($lut).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~14 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

2.39.4. Executing OPT_DFF pass (perform DFF optimizations).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 224 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.10. Executing OPT_DFF pass (perform DFF optimizations).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 84 gates and 122 wires to a netlist network with 37 inputs and 22 outputs.

2.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =      30.
ABC: Participating nodes from both networks       =      63.
ABC: Participating nodes from the first network   =      29. (  80.56 % of nodes)
ABC: Participating nodes from the second network  =      34. (  94.44 % of nodes)
ABC: Node pairs (any polarity)                    =      29. (  80.56 % of names can be moved)
ABC: Node pairs (same polarity)                   =      24. (  66.67 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       35
ABC RESULTS:        internal signals:       63
ABC RESULTS:           input signals:       37
ABC RESULTS:          output signals:       22
Removing temp directory.

2.42. Executing ICE40_WRAPCARRY pass (wrap carries).

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 1 unused cells and 92 unused wires.

2.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       38
  1-LUT                2
  2-LUT               16
  3-LUT                7
  4-LUT               13
  with \SB_CARRY    (#0)    2
  with \SB_CARRY    (#1)    2

Eliminating LUTs.
Number of LUTs:       38
  1-LUT                2
  2-LUT               16
  3-LUT                7
  4-LUT               13
  with \SB_CARRY    (#0)    2
  with \SB_CARRY    (#1)    2

Combining LUTs.
Number of LUTs:       38
  1-LUT                2
  2-LUT               16
  3-LUT                7
  4-LUT               13
  with \SB_CARRY    (#0)    2
  with \SB_CARRY    (#1)    2

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~163 debug messages>

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10011111 for cells of type $lut.
Using template $paramod$8ff049b8516c2f8f74e5ea53e4e574b0441ac9d7\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
No more expansions possible.
<suppressed ~197 debug messages>
Removed 0 unused cells and 84 unused wires.

2.46. Executing AUTONAME pass.
Renamed 349 objects in module top (10 iterations).
<suppressed ~92 debug messages>

2.47. Executing HIERARCHY pass (managing design hierarchy).

2.47.1. Analyzing design hierarchy..
Top module:  \top

2.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.48. Printing statistics.

=== top ===

   Number of wires:                 45
   Number of wire bits:            205
   Number of public wires:          45
   Number of public wire bits:     205
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     SB_CARRY                        2
     SB_DFF                          1
     SB_DFFE                         5
     SB_DFFSR                       32
     SB_LUT4                        38
     SB_MAC16                        1

2.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.50. Executing JSON backend.

End of script. Logfile hash: dbdf1d1d8e, CPU: user 0.92s system 0.01s, MEM: 20.00 MB peak
Yosys 0.33+79 (git sha1 b52f6cb19, gcc 12.2.0-14 -fPIC -Os)
Time spent: 53% 13x read_verilog (0 sec), 16% 1x abc (0 sec), ...
nextpnr-ice40 --up5k --package sg48 --json top.json --pcf pico-ice.pcf --asc top.asc
Info: constrained 'CLK' to bel 'X12/Y31/io1'
Info: constrained 'LED_G' to bel 'X4/Y31/io0'
Info: constrained 'LED_B' to bel 'X5/Y31/io0'
Info: constrained 'LED_R' to bel 'X6/Y31/io0'

Info: Packing constants..
Info: Packing IOs..
Info: Packing LUT-FFs..
Info:       17 LCs used as LUT4 only
Info:       21 LCs used as LUT4 and DFF
Info: Packing non-LUT FFs..
Info:       17 LCs used as DFF only
Info: Packing carries..
Info:        1 LCs used as CARRY only
Info: Packing indirect carry+LUT pairs...
Info:        0 LUTs merged into carry LCs
Info: Packing RAMs..
Info: Placing PLLs..
Info: Packing special functions..
Info: Packing PLLs..
Info: Promoting globals..
Info: promoting CLK$SB_IO_IN (fanout 39)
Info: promoting calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_I3_O [reset] (fanout 32)
Info: Constraining chains...
Info:        1 LCs used to legalise carry chains.
Info: Checksum: 0xee077e75

Info: Device utilisation:
Info: 	         ICESTORM_LC:    59/ 5280     1%
Info: 	        ICESTORM_RAM:     0/   30     0%
Info: 	               SB_IO:     4/   96     4%
Info: 	               SB_GB:     2/    8    25%
Info: 	        ICESTORM_PLL:     0/    1     0%
Info: 	         SB_WARMBOOT:     0/    1     0%
Info: 	        ICESTORM_DSP:     1/    8    12%
Info: 	      ICESTORM_HFOSC:     0/    1     0%
Info: 	      ICESTORM_LFOSC:     0/    1     0%
Info: 	              SB_I2C:     0/    2     0%
Info: 	              SB_SPI:     0/    2     0%
Info: 	              IO_I3C:     0/    2     0%
Info: 	         SB_LEDDA_IP:     0/    1     0%
Info: 	         SB_RGBA_DRV:     0/    1     0%
Info: 	      ICESTORM_SPRAM:     0/    4     0%

Info: Placed 4 cells based on constraints.
Info: Creating initial analytic placement for 58 cells, random placement wirelen = 2064.
Info:     at initial placer iter 0, wirelen = 99
Info:     at initial placer iter 1, wirelen = 97
Info:     at initial placer iter 2, wirelen = 105
Info:     at initial placer iter 3, wirelen = 95
Info: Running main analytical placer, max placement attempts per cell = 10000.
Info:     at iteration #1, type ICESTORM_LC: wirelen solved = 4, spread = 216, legal = 225; time = 0.00s
Info:     at iteration #1, type SB_GB: wirelen solved = 223, spread = 223, legal = 234; time = 0.00s
Info:     at iteration #1, type ICESTORM_DSP: wirelen solved = 191, spread = 191, legal = 656; time = 0.00s
Info:     at iteration #1, type ALL: wirelen solved = 108, spread = 262, legal = 780; time = 0.00s
Info:     at iteration #2, type ICESTORM_LC: wirelen solved = 51, spread = 261, legal = 264; time = 0.00s
Info:     at iteration #2, type SB_GB: wirelen solved = 251, spread = 251, legal = 270; time = 0.00s
Info:     at iteration #2, type ICESTORM_DSP: wirelen solved = 188, spread = 188, legal = 270; time = 0.00s
Info:     at iteration #2, type ALL: wirelen solved = 5, spread = 132, legal = 648; time = 0.00s
Info:     at iteration #3, type ICESTORM_LC: wirelen solved = 51, spread = 268, legal = 274; time = 0.00s
Info:     at iteration #3, type SB_GB: wirelen solved = 261, spread = 261, legal = 280; time = 0.00s
Info:     at iteration #3, type ICESTORM_DSP: wirelen solved = 196, spread = 196, legal = 280; time = 0.00s
Info:     at iteration #3, type ALL: wirelen solved = 8, spread = 122, legal = 523; time = 0.00s
Info:     at iteration #4, type ICESTORM_LC: wirelen solved = 49, spread = 266, legal = 265; time = 0.00s
Info:     at iteration #4, type SB_GB: wirelen solved = 251, spread = 251, legal = 265; time = 0.00s
Info:     at iteration #4, type ICESTORM_DSP: wirelen solved = 184, spread = 184, legal = 265; time = 0.00s
Info:     at iteration #4, type ALL: wirelen solved = 12, spread = 122, legal = 2321; time = 0.00s
Info:     at iteration #5, type ICESTORM_LC: wirelen solved = 174, spread = 356, legal = 366; time = 0.00s
Info:     at iteration #5, type SB_GB: wirelen solved = 360, spread = 359, legal = 370; time = 0.00s
Info:     at iteration #5, type ICESTORM_DSP: wirelen solved = 289, spread = 289, legal = 553; time = 0.00s
Info:     at iteration #5, type ALL: wirelen solved = 16, spread = 131, legal = 391; time = 0.00s
Info:     at iteration #6, type ICESTORM_LC: wirelen solved = 55, spread = 272, legal = 272; time = 0.00s
Info:     at iteration #6, type SB_GB: wirelen solved = 252, spread = 252, legal = 272; time = 0.00s
Info:     at iteration #6, type ICESTORM_DSP: wirelen solved = 193, spread = 193, legal = 272; time = 0.00s
Info:     at iteration #6, type ALL: wirelen solved = 16, spread = 141, legal = 347; time = 0.00s
Info:     at iteration #7, type ICESTORM_LC: wirelen solved = 47, spread = 255, legal = 262; time = 0.00s
Info:     at iteration #7, type SB_GB: wirelen solved = 247, spread = 247, legal = 262; time = 0.00s
Info:     at iteration #7, type ICESTORM_DSP: wirelen solved = 184, spread = 184, legal = 262; time = 0.00s
Info:     at iteration #7, type ALL: wirelen solved = 33, spread = 126, legal = 329; time = 0.00s
Info:     at iteration #8, type ICESTORM_LC: wirelen solved = 53, spread = 262, legal = 268; time = 0.00s
Info:     at iteration #8, type SB_GB: wirelen solved = 246, spread = 246, legal = 262; time = 0.00s
Info:     at iteration #8, type ICESTORM_DSP: wirelen solved = 188, spread = 188, legal = 262; time = 0.00s
Info:     at iteration #8, type ALL: wirelen solved = 39, spread = 129, legal = 266; time = 0.00s
Info:     at iteration #9, type ICESTORM_LC: wirelen solved = 46, spread = 267, legal = 271; time = 0.00s
Info:     at iteration #9, type SB_GB: wirelen solved = 255, spread = 255, legal = 271; time = 0.00s
Info:     at iteration #9, type ICESTORM_DSP: wirelen solved = 209, spread = 209, legal = 271; time = 0.00s
Info:     at iteration #9, type ALL: wirelen solved = 43, spread = 130, legal = 255; time = 0.00s
Info:     at iteration #10, type ICESTORM_LC: wirelen solved = 78, spread = 225, legal = 249; time = 0.00s
Info:     at iteration #10, type SB_GB: wirelen solved = 232, spread = 232, legal = 249; time = 0.00s
Info:     at iteration #10, type ICESTORM_DSP: wirelen solved = 178, spread = 178, legal = 249; time = 0.00s
Info:     at iteration #10, type ALL: wirelen solved = 50, spread = 134, legal = 310; time = 0.00s
Info:     at iteration #11, type ICESTORM_LC: wirelen solved = 117, spread = 291, legal = 296; time = 0.00s
Info:     at iteration #11, type SB_GB: wirelen solved = 273, spread = 273, legal = 290; time = 0.00s
Info:     at iteration #11, type ICESTORM_DSP: wirelen solved = 210, spread = 210, legal = 290; time = 0.00s
Info:     at iteration #11, type ALL: wirelen solved = 56, spread = 135, legal = 378; time = 0.00s
Info:     at iteration #12, type ICESTORM_LC: wirelen solved = 115, spread = 263, legal = 268; time = 0.00s
Info:     at iteration #12, type SB_GB: wirelen solved = 244, spread = 244, legal = 262; time = 0.00s
Info:     at iteration #12, type ICESTORM_DSP: wirelen solved = 178, spread = 178, legal = 262; time = 0.00s
Info:     at iteration #12, type ALL: wirelen solved = 59, spread = 136, legal = 541; time = 0.00s
Info:     at iteration #13, type ICESTORM_LC: wirelen solved = 80, spread = 284, legal = 286; time = 0.00s
Info:     at iteration #13, type SB_GB: wirelen solved = 259, spread = 263, legal = 286; time = 0.00s
Info:     at iteration #13, type ICESTORM_DSP: wirelen solved = 229, spread = 229, legal = 489; time = 0.00s
Info:     at iteration #13, type ALL: wirelen solved = 49, spread = 157, legal = 501; time = 0.00s
Info:     at iteration #14, type ICESTORM_LC: wirelen solved = 80, spread = 302, legal = 309; time = 0.00s
Info:     at iteration #14, type SB_GB: wirelen solved = 282, spread = 286, legal = 309; time = 0.00s
Info:     at iteration #14, type ICESTORM_DSP: wirelen solved = 265, spread = 265, legal = 309; time = 0.00s
Info:     at iteration #14, type ALL: wirelen solved = 72, spread = 184, legal = 405; time = 0.00s
Info: HeAP Placer Time: 0.07s
Info:   of which solving equations: 0.04s
Info:   of which spreading cells: 0.01s
Info:   of which strict legalisation: 0.00s

Info: Running simulated annealing placer for refinement.
Info:   at iteration #1: temp = 0.000000, timing cost = 14, wirelen = 255
Info:   at iteration #5: temp = 0.000000, timing cost = 13, wirelen = 218
Info:   at iteration #9: temp = 0.000000, timing cost = 13, wirelen = 216 
Info: SA placement time 0.01s

Info: Max frequency for clock 'CLK$SB_IO_IN_$glb_clk': 54.30 MHz (PASS at 12.00 MHz)

Info: Max delay posedge CLK$SB_IO_IN_$glb_clk -> <async>: 8.35 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [ 64917,  65704) |******************************** 
Info: [ 65704,  66491) | 
Info: [ 66491,  67278) | 
Info: [ 67278,  68065) | 
Info: [ 68065,  68852) | 
Info: [ 68852,  69639) | 
Info: [ 69639,  70426) | 
Info: [ 70426,  71213) |* 
Info: [ 71213,  72000) | 
Info: [ 72000,  72787) |******** 
Info: [ 72787,  73574) |****** 
Info: [ 73574,  74361) | 
Info: [ 74361,  75148) | 
Info: [ 75148,  75935) | 
Info: [ 75935,  76722) |*** 
Info: [ 76722,  77509) |**** 
Info: [ 77509,  78296) |* 
Info: [ 78296,  79083) |******************************* 
Info: [ 79083,  79870) |********************************* 
Info: [ 79870,  80657) |******************** 
Info: Checksum: 0x4e19e37b

Info: Routing..
Info: Setting up routing queue.
Info: Routing 191 arcs.
Info:            |   (re-)routed arcs  |   delta    | remaining|       time spent     |
Info:    IterCnt |  w/ripup   wo/ripup |  w/r  wo/r |      arcs| batch(sec) total(sec)|
Info:        212 |       19        191 |   19   191 |         0|       0.32       0.32|
Info: Routing complete.
Info: Router1 time 0.32s
Info: Checksum: 0x938f3af7

Info: Critical path report for clock 'CLK$SB_IO_IN_$glb_clk' (posedge -> posedge):
Info: curr total
Info:  1.4  1.4  Source calc_dsp_inst.state_SB_DFFE_Q_D_SB_LUT4_O_LC.O
Info:  1.8  3.2    Net calc_dsp_inst.state[2] (1,23) -> (1,24)
Info:                Sink calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_O_LC.I2
Info:                Defined in:
Info:                  top.v:14.13-16.5
Info:                  calc_dsp.v:75.19-75.28
Info:                  /usr/local/bin/../share/yosys/ice40/arith_map.v:33.23-33.24
Info:  1.2  4.4  Source calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_O_LC.O
Info:  1.8  6.1    Net calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3[2] (1,24) -> (2,24)
Info:                Sink calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_I3_LC.I3
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ice40/cells_map.v:6.21-6.22
Info:  0.9  7.0  Source calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_I3_LC.O
Info:  4.2 11.2    Net calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_I3_O (2,24) -> (12,31)
Info:                Sink $gbuf_calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_I3_O_$glb_sr.USER_SIGNAL_TO_GLOBAL_BUFFER
Info:  1.6 12.8  Source $gbuf_calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_I3_O_$glb_sr.GLOBAL_BUFFER_OUTPUT
Info:  0.6 13.4    Net calc_dsp_inst.dsp_b_SB_DFFSR_Q_D_SB_LUT4_O_I3_SB_LUT4_I3_O_$glb_sr (12,31) -> (2,22)
Info:                Sink calc_dsp_inst.dsp_a_SB_DFFSR_Q_13_DFFLC.SR
Info:  0.1 13.5  Setup calc_dsp_inst.dsp_a_SB_DFFSR_Q_13_DFFLC.SR
Info: 5.2 ns logic, 8.4 ns routing

Info: Critical path report for cross-domain path 'posedge CLK$SB_IO_IN_$glb_clk' -> '<async>':
Info: curr total
Info:  1.4  1.4  Source calc_dsp_inst.out_val_SB_DFFE_Q_DFFLC.O
Info:  2.4  3.8    Net correct (3,24) -> (3,26)
Info:                Sink LED_B_SB_LUT4_O_LC.I3
Info:                Defined in:
Info:                  top.v:6.9-6.16
Info:  0.9  4.7  Source LED_B_SB_LUT4_O_LC.O
Info:  3.6  8.3    Net LED_R$SB_IO_OUT (3,26) -> (6,31)
Info:                Sink LED_R$sb_io.D_OUT_0
Info:                Defined in:
Info:                  top.v:4.31-4.36
Info: 2.3 ns logic, 6.0 ns routing

Info: Max frequency for clock 'CLK$SB_IO_IN_$glb_clk': 73.87 MHz (PASS at 12.00 MHz)

Info: Max delay posedge CLK$SB_IO_IN_$glb_clk -> <async>: 8.27 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [ 69796,  70312) |******************************** 
Info: [ 70312,  70828) |* 
Info: [ 70828,  71344) | 
Info: [ 71344,  71860) | 
Info: [ 71860,  72376) |** 
Info: [ 72376,  72892) |****** 
Info: [ 72892,  73408) | 
Info: [ 73408,  73924) |****** 
Info: [ 73924,  74440) | 
Info: [ 74440,  74956) | 
Info: [ 74956,  75472) | 
Info: [ 75472,  75988) |**** 
Info: [ 75988,  76504) |*** 
Info: [ 76504,  77020) | 
Info: [ 77020,  77536) |* 
Info: [ 77536,  78052) |* 
Info: [ 78052,  78568) |* 
Info: [ 78568,  79084) |***************************************** 
Info: [ 79084,  79600) |******************* 
Info: [ 79600,  80116) |********************** 

Info: Program finished normally.
icepack top.asc top.bin
